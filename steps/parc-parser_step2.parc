

parser {
	ruleset equals ruleset
}

ruleset {
	rule+
}

rule {
	name > ruleprops group
}

ruleprops {
	star? arrow?
}

group {
	"{" > groupcontent "}"
	"(" > groupcontent ")"
}

groupcontent => {
	branch groupcontenttail?
}

groupcontenttail => {
	"/" > branch groupcontenttail?
	"lb" (branch groupcontenttail?)?
}

branch {
	expression+ cond?
}

cond {
	">" expression*
}

expression {
	(dot / name / string / chars / group) exprmod?
}

exprmod => {
	star / plus / question
}



=====================


tokens* {
	[ \t\r\n]* (grouportoken > [ \t\r\n]*)*
}

grouportoken* {
	grouptokens / token
}

grouptokens* {
	openbracket > [ \t\r\n]* groupcontent closebracket
}

groupcontent* {
	(grouportoken > groupws?)*
}

groupws* {
	[ \t\r]+ (lb [ \t\r\n]*)? / lb [ \t\r\n]*
}

lb {
	"\n"
}

openbracket => {
	[{(]
}

closebracket => {
	[})]
}

token => {
	specialsyntax / string / chars / name
}

specialsyntax => {
	arrow / equals / star / plus / question / dot / [/>]
}

arrow {
	"=>"
}

equals {
	"="+
}

star {
	"*"
}

plus {
	"+"
}

question {
	"?"
}

dot {
	"."
}

name {
	[a-zA-Z_] nametail?
}

nametail {
	[a-zA-Z0-9_]+
}

string {
	"\"" > stritem* "\""
}

stritem {
	"\\" > . / [^"]
}

chars {
	"[" > charsitem* "]"
}

charsitem {
	"\\" > . / [^\]]
}

