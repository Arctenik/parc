

//import("parc-talon-parser_sub.tal")
import("parc-talon-parser.tal")
import("parc-talon.tal")


//this parserdata = ["parser",[["ruleset",[["rule",[["name","parser",2],["ruleprops",[],9],["group",[["branch",[["cond",[["expression",[["name","ruleset",14]],14],["expression",[["colon",";",22],["name","equals",23]],22],["expression",[["name","ruleset",30]],30]],12]],12]],9]],2],["rule",[["name","ruleset",41],["ruleprops",[],49],["group",[["branch",[["expression",[["name","rule",52],["plus","+",56]],52]],52]],49]],41],["rule",[["name","rule",61],["ruleprops",[],66],["group",[["branch",[["expression",[["name","name",69]],69],["cond",[["expression",[["name","ruleprops",76]],76],["expression",[["name","group",86]],86]],74]],69]],66]],61],["rule",[["name","ruleprops",95],["ruleprops",[],105],["group",[["branch",[["cond",[["expression",[["name","star",110],["question","?",114]],110],["expression",[["name","arrow",116],["question","?",121]],116]],108]],108]],105]],95],["rule",[["name","group",126],["ruleprops",[],132],["group",[["branch",[["expression",[["string","\"{\"",135]],135],["cond",[["expression",[["name","groupcontent",141]],141],["expression",[["string","\"}\"",154]],154]],139]],135],["branch",[["expression",[["string","\"(\"",159]],159],["cond",[["expression",[["name","groupcontent",165]],165],["expression",[["string","\")\"",178]],178]],163]],159]],132]],126],["rule",[["name","groupcontent",185],["ruleprops",[["arrow",[],198]],198],["group",[["branch",[["expression",[["name","uncondbranch",204]],204],["cond",[["expression",[["string","\"lb\"",219],["question","?",223]],219]],217]],204],["branch",[["expression",[["name","branch",226]],226],["cond",[["expression",[["name","groupcontenttail",235],["question","?",251]],235]],233]],226]],201]],185],["rule",[["name","groupcontenttail",256],["ruleprops",[["arrow",[],273]],273],["group",[["branch",[["expression",[["string","\"/\"",279]],279],["cond",[["expression",[["name","groupcontent",285]],285]],283]],279],["branch",[["expression",[["colon",";",299],["name","lb",300]],299],["cond",[["expression",[["name","groupcontent",305],["question","?",317]],305]],303]],299]],276]],256],["rule",[["name","branch",322],["ruleprops",[],329],["group",[["branch",[["expression",[["name","offsets",332]],332],["cond",[["expression",[["name","expression",342],["question","?",352]],342],["expression",[["name","cond",354],["question","?",358]],354],["expression",[["name","arrow",360],["question","?",365]],360]],340]],332],["branch",[["expression",[["name","expression",368]],368],["cond",[["expression",[["name","cond",381],["question","?",385]],381],["expression",[["name","arrow",387],["question","?",392]],387]],379]],368]],329]],322],["rule",[["name","offsets",397],["ruleprops",[],405],["group",[["branch",[["expression",[["name","offset",408],["plus","+",414]],408]],408]],405]],397],["rule",[["name","uncondbranch",419],["ruleprops",[["arrow",[["name","branch",435]],432]],432],["group",[["branch",[["expression",[["name","cond",445]],445],["cond",[["expression",[["name","arrow",452],["question","?",457]],452]],450]],445],["branch",[["expression",[["name","arrow",460]],460]],460]],442]],419],["rule",[["name","cond",469],["ruleprops",[],474],["group",[["branch",[["expression",[["string","\">\"",477]],477],["cond",[["expression",[["name","expression",483],["star","*",493]],483]],481]],477]],474]],469],["rule",[["name","arrow",498],["ruleprops",[],504],["group",[["branch",[["expression",[["string","\"=>\"",507]],507],["cond",[["expression",[["name","name",514],["question","?",518]],514]],512]],507]],504]],498],["rule",[["name","expression",523],["ruleprops",[],534],["group",[["branch",[["expression",[["name","offset",537]],537]],537],["branch",[["expression",[["name","unmoddedexpr",545]],545],["cond",[["expression",[["name","exprmod",560],["question","?",567]],560]],558]],545]],534]],523],["rule",[["name","offset",572],["ruleprops",[],579],["group",[["branch",[["expression",[["name","number",582]],582],["cond",[["expression",[["name","offsettype",591]],591],["expression",[["name","literal",602]],602]],589]],582],["branch",[["expression",[["name","offsettype",611]],611],["cond",[["expression",[["name","literal",624]],624]],622]],611]],579]],572],["rule",[["name","unmoddedexpr",635],["ruleprops",[["arrow",[],648]],648],["group",[["branch",[["expression",[["name","colon",654]],654],["cond",[["expression",[["name","nongroupbase",662]],662]],660]],654],["branch",[["expression",[["name","baseexpr",676]],676]],676]],651]],635],["rule",[["name","baseexpr",688],["ruleprops",[["arrow",[],697]],697],["group",[["branch",[["expression",[["name","nongroupbase",703]],703]],703],["branch",[["expression",[["name","group",718]],718]],718]],700]],688],["rule",[["name","nongroupbase",727],["ruleprops",[["arrow",[],740]],740],["group",[["branch",[["expression",[["name","literal",746]],746]],746],["branch",[["expression",[["name","name",756]],756]],756]],743]],727],["rule",[["name","literal",764],["ruleprops",[["arrow",[],772]],772],["group",[["branch",[["expression",[["name","dot",778]],778]],778],["branch",[["expression",[["name","string",784]],784]],784],["branch",[["expression",[["name","chars",793]],793]],793]],775]],764],["rule",[["name","exprmod",802],["ruleprops",[["arrow",[],810]],810],["group",[["branch",[["expression",[["name","star",816]],816]],816],["branch",[["expression",[["name","plus",823]],823]],823],["branch",[["expression",[["name","question",830]],830]],830]],813]],802]],2],["ruleset",[["rule",[["name","tokens",869],["ruleprops",[["star","*",875]],875],["group",[["branch",[["cond",[["expression",[["name","anyws",882],["question","?",887]],882],["expression",[["group",[["branch",[["expression",[["name","grouportoken",890]],890],["cond",[["expression",[["name","anyws",905],["question","?",910]],905]],903]],890]],889],["star","*",912]],889]],880]],880]],877]],869],["rule",[["name","grouportoken",917],["ruleprops",[["star","*",929]],929],["group",[["branch",[["expression",[["name","grouptokens",934]],934]],934],["branch",[["expression",[["name","token",948]],948]],948]],931]],917],["rule",[["name","grouptokens",957],["ruleprops",[["star","*",968]],968],["group",[["branch",[["expression",[["name","openbracket",973]],973],["cond",[["expression",[["name","anyws",987],["question","?",992]],987],["expression",[["name","groupcontent",994]],994],["expression",[["name","closebracket",1007]],1007]],985]],973]],970]],957],["rule",[["name","groupcontent",1023],["ruleprops",[["star","*",1035]],1035],["group",[["branch",[["cond",[["expression",[["group",[["branch",[["expression",[["name","grouportoken",1043]],1043],["cond",[["expression",[["name","ws",1058],["question","?",1060]],1058]],1056]],1043]],1042],["star","*",1062]],1042]],1040]],1040]],1037]],1023],["rule",[["name","ws",1067],["ruleprops",[["star","*",1069]],1069],["group",[["branch",[["expression",[["colon",";",1074],["name","linews",1075],["plus","+",1081]],1074],["cond",[["expression",[["group",[["branch",[["expression",[["name","lb",1086]],1086],["cond",[["expression",[["name","anyws",1091],["question","?",1096]],1091]],1089]],1086]],1085],["question","?",1098]],1085]],1083]],1074],["branch",[["expression",[["name","lb",1101]],1101],["cond",[["expression",[["name","anyws",1106],["question","?",1111]],1106]],1104]],1101]],1071]],1067],["rule",[["name","lb",1116],["ruleprops",[],1119],["group",[["branch",[["expression",[["string","\"\\n\"",1122]],1122]],1122]],1119]],1116],["rule",[["name","linews",1130],["ruleprops",[],1137],["group",[["branch",[["expression",[["group",[["branch",[["expression",[["chars","[ \\t\\r]",1141]],1141]],1141],["branch",[["expression",[["name","comment",1151]],1151]],1151]],1140],["plus","+",1159]],1140]],1140]],1137]],1130],["rule",[["name","comment",1164],["ruleprops",[],1172],["group",[["branch",[["expression",[["string","\"//\"",1175]],1175],["cond",[["expression",[["chars","[^\\n]",1182],["star","*",1187]],1182]],1180]],1175],["branch",[["expression",[["string","\"/*\"",1190]],1190],["cond",[["expression",[["group",[["branch",[["offsets",[["offset",[["offsettype","!",1198],["string","\"*/\"",1199]],1198]],1198],["expression",[["dot",".",1204]],1204]],1198]],1197],["star","*",1206]],1197],["expression",[["string","\"*/\"",1208]],1208]],1195]],1190]],1172]],1164],["rule",[["name","anyws",1216],["ruleprops",[["star","*",1221]],1221],["group",[["branch",[["expression",[["group",[["branch",[["expression",[["chars","[ \\t\\r\\n]",1227]],1227]],1227],["branch",[["expression",[["colon",";",1239],["name","comment",1240]],1239]],1239]],1226],["plus","+",1248]],1226]],1226]],1223]],1216],["rule",[["name","openbracket",1253],["ruleprops",[["arrow",[],1265]],1265],["group",[["branch",[["expression",[["chars","[{(]",1271]],1271]],1271]],1268]],1253],["rule",[["name","closebracket",1279],["ruleprops",[["arrow",[],1292]],1292],["group",[["branch",[["expression",[["chars","[})]",1298]],1298]],1298]],1295]],1279],["rule",[["name","token",1306],["ruleprops",[["arrow",[],1312]],1312],["group",[["branch",[["expression",[["name","specialsyntax",1318]],1318]],1318],["branch",[["expression",[["name","string",1334]],1334]],1334],["branch",[["expression",[["name","chars",1343]],1343]],1343],["branch",[["expression",[["name","number",1351]],1351]],1351],["branch",[["expression",[["name","name",1360]],1360]],1360]],1315]],1306],["rule",[["name","specialsyntax",1368],["ruleprops",[["arrow",[],1382]],1382],["group",[["branch",[["expression",[["string","\"=>\"",1388]],1388]],1388],["branch",[["expression",[["string","\"=\"",1394],["plus","+",1397]],1394],["arrow",[["name","equals",1402]],1399]],1394],["branch",[["expression",[["string","\"*\"",1410]],1410],["arrow",[["name","star",1417]],1414]],1410],["branch",[["expression",[["string","\"+\"",1423]],1423],["arrow",[["name","plus",1430]],1427]],1423],["branch",[["expression",[["string","\"?\"",1436]],1436],["arrow",[["name","question",1443]],1440]],1436],["branch",[["expression",[["string","\".\"",1453]],1453],["arrow",[["name","dot",1460]],1457]],1453],["branch",[["expression",[["chars","[&!]",1465]],1465],["arrow",[["name","offsettype",1473]],1470]],1465],["branch",[["expression",[["chars","[:;]",1485]],1485],["arrow",[["name","colon",1493]],1490]],1485],["branch",[["expression",[["chars","[/>]",1500]],1500]],1500]],1385]],1368],["rule",[["name","name",1508],["ruleprops",[],1513],["group",[["branch",[["expression",[["chars","[a-zA-Z_]",1516]],1516],["cond",[["expression",[["name","nametail",1528],["question","?",1536]],1528]],1526]],1516]],1513]],1508],["rule",[["name","nametail",1541],["ruleprops",[],1550],["group",[["branch",[["expression",[["chars","[a-zA-Z0-9_]",1553],["plus","+",1565]],1553]],1553]],1550]],1541],["rule",[["name","number",1570],["ruleprops",[],1577],["group",[["branch",[["expression",[["string","\"-\"",1580]],1580],["cond",[["expression",[["chars","[0-9]",1586],["plus","+",1591]],1586]],1584]],1580],["branch",[["expression",[["chars","[0-9]",1594],["plus","+",1599]],1594]],1594]],1577]],1570],["rule",[["name","string",1604],["ruleprops",[],1611],["group",[["branch",[["expression",[["string","\"\\\"\"",1614]],1614],["cond",[["expression",[["name","stritem",1621],["star","*",1628]],1621],["expression",[["string","\"\\\"\"",1630]],1630]],1619]],1614]],1611]],1604],["rule",[["name","stritem",1638],["ruleprops",[],1646],["group",[["branch",[["expression",[["string","\"\\\\\"",1649]],1649],["cond",[["expression",[["dot",".",1656]],1656]],1654]],1649],["branch",[["expression",[["chars","[^\"]",1660]],1660]],1660]],1646]],1638],["rule",[["name","chars",1668],["ruleprops",[],1674],["group",[["branch",[["expression",[["string","\"[\"",1677]],1677],["cond",[["expression",[["name","charsitem",1683],["star","*",1692]],1683],["expression",[["string","\"]\"",1694]],1694]],1681]],1677]],1674]],1668],["rule",[["name","charsitem",1701],["ruleprops",[],1711],["group",[["branch",[["expression",[["string","\"\\\\\"",1714]],1714],["cond",[["expression",[["dot",".",1721]],1721]],1719]],1714],["branch",[["expression",[["chars","[^\\]]",1725]],1725]],1725]],1711]],1701]],869]],2]
//print(parc_compile(parc_parse_evaltransforms(parserdata), "parc_parse")[0])


// /*
fun readlines() {
	this result = ""
	this line = getstr("")
	while (line != "END") {
		if (result) {
			result += "\n"
		}
		result += line
		line = getstr("")
	}
	ret result
}

this compiled = parc_compile(readlines(), "atjs_parse")

if (compiled[1]) {
	print(compiled[1])
} else {
	print(compiled[0])
}
// */

